type Worker {
  fullName: String
  identification: ID
  profilePath: String
  created: String
  modified: String
  entity: String
}

type MinutesFormatter {
  hours: Int
  minutes: Int
}

type PositionInterval {
  top: Float
  height: Float
}

type IntervalWorkerTime {
  start: String
  end: ID
  minutes: Int
  minutesFormatter: MinutesFormatter
  position: PositionInterval
}

type PaymentValuesSurcharges {
  paymentHoursExtra: Float
  paymentHoursNight: Float
}

type PaymentValues {
  paymentHoursBasic: Float
  surcharges: PaymentValuesSurcharges
}

type PaymentWorkerTime {
  day: String
  hoursWorked: Float
  hoursWorkedBasic: Float
  hoursWorkedExtra: Float
  hoursNight: Float
  payment: PaymentValues
}

type WorkerImage {
  pathFaceInCollection: String
  identification: String
  collectionId: String
  faceId: String
  status: String
  created: String
  modified: String
  entity: String
}

type WorkerMarkTime {
  dateRegister: String
  identification: String
  reason: String
  type: String
  picture: String
  created: String
  modified: String
  entity: String
}

type WorkerImagesKeys {
  identification: ID!
  faceIds: [String]
}

input WorkerMarkTimeQuery {
  identification: String!
  year: String!
  month: String!
  day: String
  limit: Int
  reverse: Boolean
}

input WorkerInput {
  fullName: String
  identification: ID!
  profilePath: String
  isPatch: Boolean
}

input IntervalWorkerTimeQueryInput {
  identification: ID!
  start: String!
  end: String!
}

input DisassociateWorkerImagesInput {
  identification: ID!
  faceIds: [String]
}

input MarkRecordWorkerInput {
  dateRegister: String!
  imageKey: String!
  reason: String!
  type: String!
  force: Boolean
}

input IntervalNonNightInput {
  since: Int
  until: Int
}

type IntervalNonNightType {
  since: Int
  until: Int
}

input TemplatePaymentInput {
  baseHourDay: Float
  baseHourHoliday: Float
  hoursMinimum: Float
  extraHourNormalDay: Float
  extraHourHoliday: Float
  nocturnHourNormalDay: Float
  nocturnHourHoliday: Float
  intervalNonNight: IntervalNonNightInput
}

type TemplatePaymentType {
  baseHourDay: Float
  baseHourHoliday: Float
  hoursMinimum: Float
  extraHourNormalDay: Float
  extraHourHoliday: Float
  nocturnHourNormalDay: Float
  nocturnHourHoliday: Float
  intervalNonNight: IntervalNonNightType
}

type Query {
  getPaymentTemplate: TemplatePaymentType
  getListWorkerMarkTime(query: WorkerMarkTimeQuery!): [WorkerMarkTime]
  getWorkerImages(identification: ID!): [WorkerImage]
  getDetailWorker(identification: ID!): Worker
  generateWorkerPayment(
    query: IntervalWorkerTimeQueryInput!
  ): [PaymentWorkerTime]
  getWorkerIntervalsTime(
    query: IntervalWorkerTimeQueryInput!
  ): [IntervalWorkerTime]
  getListWorker: [Worker]
}

type Mutation {
  putWorker(props: WorkerInput): Boolean
  disassociateWorkerImages(props: DisassociateWorkerImagesInput): Boolean
  markRecordWorker(props: MarkRecordWorkerInput): Worker
  putTemplatePayment(props: TemplatePaymentInput): Boolean
}

schema {
  query: Query
  mutation: Mutation
}
